<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rico's Blog]]></title>
  <link href="http://hgomez.github.com/atom.xml" rel="self"/>
  <link href="http://hgomez.github.com/"/>
  <updated>2012-09-30T18:14:21+02:00</updated>
  <id>http://hgomez.github.com/</id>
  <author>
    <name><![CDATA[Henri Gomez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding java from command line on OSX]]></title>
    <link href="http://hgomez.github.com/blog/2012/07/20/understanding-java-from-command-line-on-osx/"/>
    <updated>2012-07-20T20:57:06+02:00</updated>
    <id>http://hgomez.github.com/blog/2012/07/20/understanding-java-from-command-line-on-osx</id>
    <content type="html"><![CDATA[<h1>Java on OSX</h1>

<p>OSX is a good platform for Java development but also running Java applications. Sadly XServe servers are no more available but in many cases Mac Mini could to pretty good works as Java server applications.</p>

<p>For a long time, OSX Java was maintained by Apple, from Sun Hotspot and was often a bit late vs Windows/Linux releases.</p>

<p>With Lion, Apple announced that they won&#8217;t produce Java for their futures OS, starting with Mountain Lion (10.8) and Oracle will do the job as they did for major distributions.</p>

<p>OpenJDK project included OSX support more than one year ago and there is now a very good coverage of Java for OSX.</p>

<p>It take some time to see first official Java 7 from Oracle on OSX, for Lion only, but there was community alternatives like <a href="http://code.google.com/p/openjdk-osx-build/">openjdk-osx-build</a>, where you could find a large choice of OpenJDK for OSX (7, 8, 8 with Lambda, 8 with Jigsaw).</p>

<p>If you install Java&#8217;s from <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle</a> or <a href="http://code.google.com/p/openjdk-osx-build/downloads/list">openjdk-osx-build</a>, you may want to know how to select one of them for your application and even select a specific one for some of your applications.</p>

<h1>Java Preferences</h1>

<p>Apple provide a good tool to select default JVM, Java Preferences :</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2012/07/JavaPreferences.png"><img src="http://blog.hgomez.net/wp-content/uploads/2012/07/JavaPreferences.png" alt="" /></a></p>

<p>In this screenshot you could see many JVM, from many sources, <strong>Apple, Oracle</strong> and <strong>openjdk-osx-build</strong> and default ordering Java (from up to bottom).</p>

<p>Here you&#8217;ll see that default JVM will be Apple Java 1.6.0_33-b03-424 in 64bits, next choice will be Apple Java 1.6.0_33-b03-424 in 32bits. You will notice these JVM are marked as System, more on this later.</p>

<p>Next you&#8217;ll find Apple Java 1.6.0_31 in 64 and 32 bits and then Java 1.7 (1.7.0-jdk7u6-b20-20120719) from openjdk-osx-build. By the end you&#8217;ll find latest official Oracle Java 7, aka 1.7.0_05.</p>

<p>What does it means for you in a command line mode, console is just mandatory for any serious OSX geek ?</p>

<p>Let see java used by default :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>java -version
</span><span class='line'>java version <span class="s2">&quot;1.6.0_33&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.6.0_33-b03-424-11M3720<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 20.8-b03-424, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default Java is Apple 1.6.0_33, 64bits as expected, so far so good.</p>

<p>What should i do if I want to select instead Java 7 ?</p>

<h2>Standard Unix way</h2>

<p>You could just update your PATH environment variable to update search path :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home/bin:<span class="nv">$PATH</span>
</span><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;1.7.0-jdk7u6-b20&quot;</span>
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 1.7.0-jdk7u6-b20-20120719<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 23.2-b09, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works but OSX provide smarter mechanism.</p>

<h2>OSX way</h2>

<p>Keeping in mind we&#8217;re discussing command line operation, updating default JVM via Java Preferences will not be retained, will define instead <strong>JAVA_HOME</strong> environment variable like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home/
</span><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;1.7.0-jdk7u6-b20&quot;</span>
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 1.7.0-jdk7u6-b20-20120719<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 23.2-b09, mixed mode<span class="o">)</span>&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<p>We could keep our current PATH and it will be <strong>Apple java bootstrap</strong> system, living into <strong>/usr/bin/java</strong> who make use of <strong>JAVA_HOME</strong> and launch the proper JVM. Simple but efficient .</p>

<h2>java_home</h2>

<p>As we see previously, Java Preferences define an order of preferred JVM on OSX, like alternatives does on many Linux systems, especially those using <a href="http://www.jpackage.org">JPackage</a> tooling. So there should be a way to get access to these preferences and here entering <strong>java_home</strong></p>

<p>java_home is located in /usr/libexec and has many useful features :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home --help
</span><span class='line'>Usage: java_home <span class="o">[</span>options...<span class="o">]</span>
</span><span class='line'>    Returns the path to a Java home directory from the current user<span class="err">&#39;</span>s settings.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>    <span class="o">[</span>-v/--version   &lt;version&gt;<span class="o">]</span>       Filter Java versions in the <span class="s2">&quot;JVMVersion&quot;</span> form 1.X<span class="o">(</span>+ or *<span class="o">)</span>.
</span><span class='line'>    <span class="o">[</span>-a/--arch      &lt;architecture&gt;<span class="o">]</span>  Filter JVMs matching architecture <span class="o">(</span>i386, x86_64, etc<span class="o">)</span>.
</span><span class='line'>    <span class="o">[</span>-d/--datamodel &lt;datamodel&gt;<span class="o">]</span>     Filter JVMs capable of -d32 or -d64
</span><span class='line'>    <span class="o">[</span>-t/--task      &lt;task&gt;<span class="o">]</span>          Use the JVM list <span class="k">for </span>a specific task <span class="o">(</span>Applets, WebStart, BundledApp, JNI, or CommandLine<span class="o">)</span>
</span><span class='line'>    <span class="o">[</span>-F/--failfast<span class="o">]</span>                  Fail when filters <span class="k">return </span>no JVMs, <span class="k">do </span>not <span class="k">continue </span>with default.
</span><span class='line'>    <span class="o">[</span>   --exec      &lt;<span class="nb">command</span>&gt; ...<span class="o">]</span>   Execute the <span class="nv">$JAVA_HOME</span>/bin/&lt;<span class="nb">command</span>&gt; with the remaining arguments.
</span><span class='line'>    <span class="o">[</span>-R/--request<span class="o">]</span>                   Request installation of a Java Runtime <span class="k">if </span>not installed.
</span><span class='line'>    <span class="o">[</span>-X/--xml<span class="o">]</span>                       Print full JVM list and additional data as XML plist.
</span><span class='line'>    <span class="o">[</span>-V/--verbose<span class="o">]</span>                   Print full JVM list with architectures.
</span><span class='line'>    <span class="o">[</span>-h/--help<span class="o">]</span>                      This usage information.
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s play with <strong>java_home</strong> now.</p>

<p>Obtaining path of default JVM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home
</span><span class='line'>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Obtaining path of default Java 7 JVM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home -v 1.7
</span><span class='line'>/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Obtaining path of default Java 8 JVM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home -v 1.8
</span><span class='line'>/Library/Java/JavaVirtualMachines/1.8.0.jdk/Contents/Home
</span></code></pre></td></tr></table></div></figure>


<p>Obtaining path of default Java 1.6 32 bits JVM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home -v 1.6 -a i386
</span><span class='line'>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Obtaining path of default Java 1.6 64 bits JVM :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home -v 1.6 -a x86_64
</span><span class='line'>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span></code></pre></td></tr></table></div></figure>


<p>Here you could see that 32 and 64bits JVM have the same path. This is because due to universal mode (i386/x86_64), <strong>Apple</strong> produce a dual mode JVM. This is not the case for <strong>Oracle Java 7</strong> where only 64bits JVM is available.</p>

<p>Let&#8217;s combine <strong>java_home</strong> and <strong>JAVA_HOME</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="sb">`</span>/usr/libexec/java_home -v 1.7<span class="sb">`</span>
</span><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;1.7.0-jdk7u6-b20&quot;</span>
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 1.7.0-jdk7u6-b20-20120719<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 23.2-b09, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very nice features if you want to specify a Java Level (6 or 7) following your<strong> Java Preferences </strong>for some of your server side application (let say <strong>Apache Tomcat</strong>) or command operation (like <strong>Apache Maven</strong>).</p>

<p>Typically for my Apache Tomcat powered application like Jenkins, I usually set it in bin/setenv.sh :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="sb">`</span>/usr/libexec/java_home -v 1.7<span class="sb">`</span>
</span><span class='line'><span class="nv">CATALINA_OPTS</span><span class="o">=</span>-Xms256m -Xmx512m -DJENKINS_HOME<span class="o">=</span><span class="nv">$JENKINS_HOME</span> -Dhudson.model.Hudson.logStartupPerformance<span class="o">=</span><span class="nb">true</span> -Duser.language<span class="o">=</span>en -Djava.awt.headless<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you want to get a list of all JVM on your system ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>/usr/libexec/java_home -V
</span><span class='line'>Matching Java Virtual Machines <span class="o">(</span>33<span class="o">)</span>:
</span><span class='line'>    1.6.0_33-b03-424, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span><span class='line'>    1.6.0_33-b03-424, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span><span class='line'>    1.6.0_31-b04-411, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_31-b04-411.jdk/Contents/Home
</span><span class='line'>    1.6.0_31-b04-411, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_31-b04-411.jdk/Contents/Home
</span><span class='line'>    1.7.0-jdk7u6-b20-20120719, x86_64:    <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home
</span><span class='line'>    1.8.0-jdk8-b47-20120720, x86_64:  <span class="s2">&quot;OpenJDK 8&quot;</span>   /Library/Java/JavaVirtualMachines/1.8.0.jdk/Contents/Home
</span><span class='line'>    1.7.0-jdk7u4-b21-20120427, i386:  <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u4.jdk/Contents/Home
</span><span class='line'>    1.7.0_05, x86_64: <span class="s2">&quot;Java SE 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home
</span><span class='line'>    1.6.0_33-b03-424, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_33-b03-424.jdk/Contents/Home
</span><span class='line'>    1.6.0_33-b03-424, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_33-b03-424.jdk/Contents/Home
</span><span class='line'>    1.8.0-jdk8-b45-20120713-jigsaw, x86_64:   <span class="s2">&quot;OpenJDK 8&quot;</span>   /Library/Java/JavaVirtualMachines/1.8.0-jigsaw.jdk/Contents/Home
</span><span class='line'>    1.8.0-b48-20120720-lambda, x86_64:    <span class="s2">&quot;OpenJDK 8&quot;</span>   /Library/Java/JavaVirtualMachines/1.8.0-lambda.jdk/Contents/Home
</span><span class='line'>    1.7.0-jdk7u6-b20-20120719, i386:  <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home
</span><span class='line'>    1.7.0-jdk7u4-b21-20120427, x86_64:    <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u4.jdk/Contents/Home
</span><span class='line'>    1.7.0-jdk7u4-b21-20120421, x86_64:    <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u4-64.jdk/Contents/Home
</span><span class='line'>    1.7.0, x86_64:    <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home
</span><span class='line'>    1.7.0, i386:  <span class="s2">&quot;OpenJDK 7&quot;</span>   /Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home
</span><span class='line'>    1.6.0_32-b05-420, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home
</span><span class='line'>    1.6.0_32-b05-420, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home
</span><span class='line'>    1.6.0_32-b05-417, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_32-b05-417.jdk/Contents/Home
</span><span class='line'>    1.6.0_32-b05-417, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_32-b05-417.jdk/Contents/Home
</span><span class='line'>    1.6.0_31-b04-413, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_31-b04-413.jdk/Contents/Home
</span><span class='line'>    1.6.0_31-b04-413, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_31-b04-413.jdk/Contents/Home
</span><span class='line'>    1.6.0_30-b12-409, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_30-b12-409.jdk/Contents/Home
</span><span class='line'>    1.6.0_30-b12-409, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_30-b12-409.jdk/Contents/Home
</span><span class='line'>    1.6.0_30-b12-404, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_30-b12-404.jdk/Contents/Home
</span><span class='line'>    1.6.0_30-b12-404, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_30-b12-404.jdk/Contents/Home
</span><span class='line'>    1.6.0_29-b11-397, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_29-b11-397.jdk/Contents/Home
</span><span class='line'>    1.6.0_29-b11-397, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_29-b11-397.jdk/Contents/Home
</span><span class='line'>    1.6.0_27-b07-395, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_27-b07-395.jdk/Contents/Home
</span><span class='line'>    1.6.0_27-b07-395, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_27-b07-395.jdk/Contents/Home
</span><span class='line'>    1.6.0_26-b03-383, x86_64: <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home
</span><span class='line'>    1.6.0_26-b03-383, i386:   <span class="s2">&quot;Java SE 6&quot;</span>   /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home
</span><span class='line'>
</span><span class='line'>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span></code></pre></td></tr></table></div></figure>


<h2>Note on JVM Locations</h2>

<p>You may have noticed many differents paths for JVM :</p>

<ul>
<li><p>/System/Library/Java/JavaVirtualMachines is where Apple install System JVM. Here you could have only one JVM by family, ie 1.6, 1.7. These JVM will be available to all users on system.</p></li>
<li><p>/Library/Java/JavaVirtualMachines is a slot location for guest JVMs, specially designed to host contributors JVM like <strong>Oracle</strong>, <strong>openjdk-osx-build </strong>or<strong> Apple Developper Preview JVMs</strong> Also, these JVM will be available to all users on system.</p></li>
<li><p>/Users/bill/Library/Java/JavaVirtualMachines is a slot for contributor JVMs but only available to user bill.</p></li>
</ul>


<h2>To conclude</h2>

<p>OSX is probably the platform with the more choice of Java to run and experiment, Java 6, Java 7, OpenJDK 7, 8, Lambda, Jigsaw.</p>

<p>And with its <strong>/usr/libexec/java_home</strong> and <strong>JAVA_HOME</strong> environment variable, you could select any of them for your console or command mode operations very easily.</p>

<p>Enjoy Java on OSX !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Universal Apache Tomcat Native Library on OS/X - updated]]></title>
    <link href="http://hgomez.github.com/blog/2012/06/13/building-universal-apache-tomcat-native-library-on-osx-updated/"/>
    <updated>2012-06-13T10:28:13+02:00</updated>
    <id>http://hgomez.github.com/blog/2012/06/13/building-universal-apache-tomcat-native-library-on-osx-updated</id>
    <content type="html"><![CDATA[<p>Updated build process for tomcat-connector, 1.1.24, no more APXS variable or configure parameters required</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TCN_RELEASE</span><span class="o">=</span>1.1.24
</span><span class='line'>curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/<span class="nv">$TCN_RELEASE</span>/source/tomcat-native-<span class="nv">$TCN_RELEASE</span>-src.tar.gz -o tomcat-native-<span class="nv">$TCN_RELEASE</span>-src.tar.gz
</span><span class='line'>tar xvzf tomcat-native-<span class="nv">$TCN_RELEASE</span>-src.tar.gz
</span><span class='line'><span class="nb">cd </span>tomcat-native-<span class="nv">$TCN_RELEASE</span>-src/jni/native
</span><span class='line'>
</span><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386 -arch x86_64&#39;</span> <span class="nv">APXSLDFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386 -arch x86_64&#39;</span> ./configure --with-apr<span class="o">=</span>/usr --with-ssl<span class="o">=</span>/usr --with-java-home<span class="o">=</span>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</span><span class='line'>make clean
</span><span class='line'>make
</span><span class='line'>
</span><span class='line'>sudo cp .libs/libtcnative-1.0.1.24.dylib /usr/lib/java
</span><span class='line'>sudo rm -f  /usr/lib/java/libtcnative-1.dylib
</span><span class='line'>sudo ln -s /usr/lib/java/libtcnative-1.0.1.24.dylib /usr/lib/java/libtcnative-1.dylib
</span></code></pre></td></tr></table></div></figure>


<h3>A note about Lion</h3>

<p>If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.7, Java headers are not on the usual location and you could find them under <strong>/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers</strong></p>

<p>You should then update the <strong>configure</strong> command line like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386 -arch x86_64&#39;</span> ./configure --with-apr<span class="o">=</span>/usr --with-ssl<span class="o">=</span>/usr --with-java-home<span class="o">=</span>/System/Library/Frameworks/JavaVM.framework/Versions/A/
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TCN_RELEASE</span><span class="o">=</span>1.1.24
</span><span class='line'>curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/<span class="nv">$TCN_RELEASE</span>/source/tomcat-native-<span class="nv">$TCN_RELEASE</span>-src.tar.gz -o tomcat-native-<span class="nv">$TCN_RELEASE</span>-src.tar.gz
</span><span class='line'>tar xvzf tomcat-native-<span class="nv">$TCN_RELEASE</span>-src.tar.gz
</span><span class='line'><span class="nb">cd </span>tomcat-native-<span class="nv">$TCN_RELEASE</span>-src/jni/native
</span><span class='line'>
</span><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386 -arch x86_64&#39;</span> ./configure --with-apr<span class="o">=</span>/usr --with-ssl<span class="o">=</span>/usr --with-java-home<span class="o">=</span>/System/Library/Frameworks/JavaVM.framework/Versions/A/
</span><span class='line'>make clean
</span><span class='line'>make
</span><span class='line'>
</span><span class='line'>sudo cp .libs/libtcnative-1.0.dylib /usr/lib/java
</span><span class='line'>sudo rm -f  /usr/lib/java/libtcnative-1.dylib
</span><span class='line'>sudo ln -s /usr/lib/java/libtcnative-1.0.dylib /usr/lib/java/libtcnative-1.dylib
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Apache Tomcat Connector (mod_jk) on OSX]]></title>
    <link href="http://hgomez.github.com/blog/2012/03/21/using-apache-tomcat-connector-mod_jk-on-osx/"/>
    <updated>2012-03-21T09:48:34+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/03/21/using-apache-tomcat-connector-mod_jk-on-osx</id>
    <content type="html"><![CDATA[<p>You&#8217;ll need first mod_jk installed, follow <a href="http://blog.hgomez.net/2012/03/21/building-universal-apache-tomcat-connector-mod_jk-on-osx/">Building Guide</a>.</p>

<p>Create /etc/apache2/other/jk.conf :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Load JK Module</span>
</span><span class='line'>LoadModule jk_module     libexec/apache2/mod_jk.so
</span><span class='line'><span class="c"># JK workers.properties</span>
</span><span class='line'>JkWorkersFile /etc/apache2/other/workers.properties
</span><span class='line'><span class="c"># JK shared memory location</span>
</span><span class='line'>JkShmFile     /var/log/apache2/mod_jk.shm
</span><span class='line'><span class="c"># JK logs</span>
</span><span class='line'>JkLogFile     /var/log/apache2/mod_jk.log
</span><span class='line'><span class="c"># JK log level [debug/error/info]</span>
</span><span class='line'>JkLogLevel    info
</span><span class='line'><span class="c"># JK timestamp log format</span>
</span><span class='line'>JkLogStampFormat <span class="s2">&quot;[%a %b %d %H:%M:%S %Y] &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create /etc/apache2/other/workers.properties</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>worker.list<span class="o">=</span>jenkins,watch,manage
</span><span class='line'>
</span><span class='line'><span class="c"># Set properties for worker jenkins (ajp13)</span>
</span><span class='line'>worker.jenkins.type<span class="o">=</span>ajp13
</span><span class='line'>worker.jenkins.host<span class="o">=</span>localhost
</span><span class='line'>worker.jenkins.port<span class="o">=</span>8009
</span><span class='line'>
</span><span class='line'><span class="c"># status workers</span>
</span><span class='line'>worker.watch.type<span class="o">=</span>status
</span><span class='line'>worker.watch.read_only<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>worker.watch.mount<span class="o">=</span>/user/status/jk
</span><span class='line'>worker.manage.type<span class="o">=</span>status
</span><span class='line'>worker.manage.mount<span class="o">=</span>/admin/status/jk
</span></code></pre></td></tr></table></div></figure>


<p>I choose to use VirtualName Hosting and so defined one into /etc/apache2/extra/httpd-vhosts.conf :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NameVirtualHost *:80
</span><span class='line'>
</span><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>
</span><span class='line'>    ServerName  mbpbuilder.hgomez.net
</span><span class='line'>    ServerAlias mbpbuilder
</span><span class='line'>    ServerAdmin webmaster@mbpbuilder.hgomez.net
</span><span class='line'>
</span><span class='line'>    ErrorLog    <span class="s2">&quot;/var/log/apache2/mbpbuilder.org-error_log&quot;</span>
</span><span class='line'>    CustomLog   <span class="s2">&quot;/var/log/apache2/mbpbuilder-access_log&quot;</span> common
</span><span class='line'>
</span><span class='line'>    JkMount  /* jenkins
</span><span class='line'>
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Universal Apache Tomcat Connector (mod_jk) on OSX]]></title>
    <link href="http://hgomez.github.com/blog/2012/03/21/building-universal-apache-tomcat-connector-mod_jk-on-osx/"/>
    <updated>2012-03-21T09:31:18+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/03/21/building-universal-apache-tomcat-connector-mod_jk-on-osx</id>
    <content type="html"><![CDATA[<p>Build Universal Apache Tomcat Connector (mod_jk) for OSX follow tricks used for Apache Tomcat Native Library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386 -arch x86_64&#39;</span> <span class="nv">APXSLDFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386-arch x86_64&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a small script to do it :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nv">JK_VERSION</span><span class="o">=</span>1.2.37
</span><span class='line'>
</span><span class='line'>curl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-<span class="k">${</span><span class="nv">JK_VERSION</span><span class="k">}</span>-src.tar.gz -o tomcat-connectors-<span class="k">${</span><span class="nv">JK_VERSION</span><span class="k">}</span>-src.tar.gz
</span><span class='line'>tar xvzf tomcat-connectors-<span class="k">${</span><span class="nv">JK_VERSION</span><span class="k">}</span>-src.tar.gz
</span><span class='line'><span class="nb">cd </span>tomcat-connectors-<span class="k">${</span><span class="nv">JK_VERSION</span><span class="k">}</span>-src/native
</span><span class='line'>
</span><span class='line'>./configure --with-apxs<span class="o">=</span>/usr/sbin/apxs <span class="nv">CFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386 -arch x86_64&#39;</span> <span class="nv">APXSLDFLAGS</span><span class="o">=</span><span class="s1">&#39;-arch i386-arch x86_64&#39;</span>
</span><span class='line'>make clean
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>Installation is pretty simple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp apache-2.0/.libs/mod_jk.so /usr/libexec/apache2/
</span></code></pre></td></tr></table></div></figure>


<p>You could then restart your Apache HTTPd server to get new mod_jk used :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /usr/sbin/apachectl restart
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSD or not SSD ?]]></title>
    <link href="http://hgomez.github.com/blog/2012/03/18/ssd-or-not-ssd/"/>
    <updated>2012-03-18T10:58:01+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/03/18/ssd-or-not-ssd</id>
    <content type="html"><![CDATA[<p>My MacBookPro is quite old now :</p>

<ul>
<li><p>MacBook Pro 5.1 (Late 2008)</p></li>
<li><p>Core2Duo 2.66Ghz</p></li>
</ul>


<p>Under Lion, MBP appears to be sometime laggy even if I already updated it :</p>

<ul>
<li><p>Replaced original 4Gb RAM to 8Gb DDR3 (GSkill PC8500 SQ (1066 MHz), 7-7-7-20)</p></li>
<li><p>Replaced original Hitachi 320GB/5400 RPM by a 500Gb WesternDigital Black Black 7200RPM (WD5000BEKT-75KA9T0)</p></li>
</ul>


<p>I run <a href="http://www.primatelabs.ca/geekbench/">GeekBench 2.2.7</a> and give me a bench result of <strong>3752</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Benchmark Summary
</span><span class='line'>  Integer Score              3123 <span class="o">||||||||</span>|
</span><span class='line'>  Floating Point Score       5493 <span class="o">||||||||||||||||</span>
</span><span class='line'>  Memory Score               2629 <span class="o">||||||</span>|
</span><span class='line'>  Stream Score               2110 <span class="o">||||||</span>
</span><span class='line'>
</span><span class='line'>  Geekbench Score            3752 <span class="o">||||||||||</span>|
</span><span class='line'>
</span><span class='line'>System Information
</span><span class='line'>  Operating System      Mac OS X 10.7.3 <span class="o">(</span>Build 11D50<span class="o">)</span>
</span><span class='line'>  Model                 MacBook Pro <span class="o">(</span>Late 2008<span class="o">)</span>
</span><span class='line'>  Motherboard           Apple Inc. Mac-F42D86A9 Proto
</span><span class='line'>  Processor             Intel Core 2 Duo T9550 @ 2.66 GHz
</span><span class='line'>                        1 Processor, 2 Cores, 2 Threads
</span><span class='line'>  Processor ID          GenuineIntel Family 6 Model 23 Stepping 10
</span><span class='line'>  L1 Instruction Cache  32.0 KB x 2
</span><span class='line'>  L1 Data Cache         32.0 KB x 2
</span><span class='line'>  L2 Cache              6.00 MB
</span><span class='line'>  L3 Cache              0.00 B
</span><span class='line'>  Memory                8.00 GB 1067 MHz DDR3
</span><span class='line'>  BIOS                  Apple Inc.    MBP51.88Z.007E.B06.1202061253
</span></code></pre></td></tr></table></div></figure>


<p>IOs seems to be the limiting factor, especially when I&#8217;m using VirtualBox, I feel a slow IO performances.</p>

<h2>Time to bench IOs</h2>

<p>There is no tools like <strong><strong>HD Tune </strong></strong>on OSX, so I wrote a very simple shell script to measure raw IO performances.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">COUNT</span><span class="o">=</span>2048
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;testing pseudo-IO performances - 1st Pass&quot;</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/dev/null <span class="nv">bs</span><span class="o">=</span>1m <span class="nv">count</span><span class="o">=</span><span class="nv">$COUNT</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;testing IO write performances - 1st Pass&quot;</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>PERFTEST <span class="nv">bs</span><span class="o">=</span>1m <span class="nv">count</span><span class="o">=</span><span class="nv">$COUNT</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;testing IO read performances - 1st Pass&quot;</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>PERFTEST <span class="nv">of</span><span class="o">=</span>/dev/null <span class="nv">bs</span><span class="o">=</span>1m <span class="nv">count</span><span class="o">=</span><span class="nv">$COUNT</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;testing IO read performances - 2nd Pass&quot;</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>PERFTEST <span class="nv">of</span><span class="o">=</span>/dev/null <span class="nv">bs</span><span class="o">=</span>1m <span class="nv">count</span><span class="o">=</span><span class="nv">$COUNT</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;testing IO write performances - 2nd Pass&quot;</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>PERFTEST <span class="nv">bs</span><span class="o">=</span>1m <span class="nv">count</span><span class="o">=</span><span class="nv">$COUNT</span>
</span></code></pre></td></tr></table></div></figure>


<p>Results :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>testing pseudo-IO performances - 1st Pass
</span><span class='line'>2048+0 records in
</span><span class='line'>2048+0 records out
</span><span class='line'>2147483648 bytes transferred in 0.225590 secs <span class="o">(</span>9519410157 bytes/sec<span class="o">)</span>
</span><span class='line'>testing IO write performances - 1st Pass
</span><span class='line'>2048+0 records in
</span><span class='line'>2048+0 records out
</span><span class='line'>2147483648 bytes transferred in 29.882202 secs <span class="o">(</span>71864973 bytes/sec<span class="o">)</span>
</span><span class='line'>testing IO <span class="nb">read </span>performances - 1st Pass
</span><span class='line'>2048+0 records in
</span><span class='line'>2048+0 records out
</span><span class='line'>2147483648 bytes transferred in 0.677308 secs <span class="o">(</span>3170615711 bytes/sec<span class="o">)</span>
</span><span class='line'>testing IO <span class="nb">read </span>performances - 2nd Pass
</span><span class='line'>2048+0 records in
</span><span class='line'>2048+0 records out
</span><span class='line'>2147483648 bytes transferred in 0.675835 secs <span class="o">(</span>3177527036 bytes/sec<span class="o">)</span>
</span><span class='line'>testing IO write performances - 2nd Pass
</span><span class='line'>2048+0 records in
</span><span class='line'>2048+0 records out
</span><span class='line'>2147483648 bytes transferred in 33.203725 secs <span class="o">(</span>64675986 bytes/sec<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, I run this performance tests from a directory excluded from Spotlight indexing !</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2012/03/SpotLight-Exclude.png"><img src="http://blog.hgomez.net/wp-content/uploads/2012/03/SpotLight-Exclude.png" alt="" /></a></p>

<ul>
<li><p>Pseudo IO performance is justing virtual IO (/dev/zero and /dev/null), so it provide max raw IO performance : <strong>9078 MB/s</strong></p></li>
<li><p>Write IO performance is between <strong>61</strong> and <strong>68 MB/s</strong></p></li>
<li><p>Read IO performance is very high with <strong>3023 MB/s</strong></p></li>
</ul>


<p>I replayed script raising COUNT from <strong>2048</strong> to <strong>20480</strong> to reduce OSX ram buffer impact in Read IO performance but still get about <strong>2000 MB/s</strong></p>

<h3>iStat Menu disk activity - Write Performance</h3>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2012/03/WD-Perfs.png"><img src="http://blog.hgomez.net/wp-content/uploads/2012/03/WD-Perfs.png" alt="" /></a></p>

<h2>Conclusions</h2>

<ul>
<li><p>WD Black Edition perform pretty well on raw sequential Read Operations</p></li>
<li><p>With its average <strong>63 MB/s</strong> raw sequential Write Operations, WD is about 7 time slower than faster SSD like <strong>OCZ Vertex 3</strong></p></li>
</ul>


<p>Is it time to update MBP to SSD ? Probably and my candidates are :</p>

<ul>
<li><p>Crucial M4 128GB. This SSD is reported very stable and reliable. Bonus, its firmware could be updated from Mac.</p></li>
<li><p>OCZ Vertex 3 120GB. This SSD is top performer in benchmarks but Googling it reports many reliability problems.</p></li>
</ul>


<p>I&#8217;d like to get feedback from you, performing same performance testing on your Mac hardware (MBP/ SSD configurations very welcomed).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps logo 2nd try]]></title>
    <link href="http://hgomez.github.com/blog/2012/02/20/devops-logo-2nd-try/"/>
    <updated>2012-02-20T15:34:55+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/02/20/devops-logo-2nd-try</id>
    <content type="html"><![CDATA[<p>Here is the second try of logos for DevOps, still provided by Sabrina (@saabpii).
She carefully tracked comments here and on Twitter :</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2012/02/logo_devops_v2.jpg"><img src="http://blog.hgomez.net/wp-content/uploads/2012/02/logo_devops_v2.jpg" alt="" /></a></p>

<p>Please vote for your preferred one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps logos]]></title>
    <link href="http://hgomez.github.com/blog/2012/02/08/devops-logos/"/>
    <updated>2012-02-08T09:08:27+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/02/08/devops-logos</id>
    <content type="html"><![CDATA[<p>I asked some times ago Sabrina Perrin (@saabpii) a great graphic designer I worked with for years, if she could try to works on some DevOps logo.</p>

<p>As expected she has been very motivated and inspired.</p>

<p>Here are the results :</p>

<p>[caption id=&#8221;attachment_964&#8221; align=&#8221;alignnone&#8221; width=&#8221;1181&#8221; caption=&#8221;some DevOps Logo&#8221;]<a href="http://blog.hgomez.net/wp-content/uploads/2012/02/logo_devops2.jpg"><img src="http://blog.hgomez.net/wp-content/uploads/2012/02/logo_devops2.jpg" alt="" /></a>[/caption]</p>

<p>Now I need you to comments and votes for them.</p>

<p>All of this artwork is free to use, just mention Sabrina somewhere on your sites/blogs/presentations.</p>

<p>Thanks again Sabrina !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uninstalling MacFuse on Lion]]></title>
    <link href="http://hgomez.github.com/blog/2012/01/28/uninstalling-macfuse-on-lion/"/>
    <updated>2012-01-28T10:13:42+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/01/28/uninstalling-macfuse-on-lion</id>
    <content type="html"><![CDATA[<p>If you installed MacFuse on Lion (10.7) and tried to uninstall you may encountered the following error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh
</span><span class='line'>MacFUSE Uninstaller: Can not find the Archive.bom <span class="k">for </span>MacFUSE Core package.
</span></code></pre></td></tr></table></div></figure>


<p>Uninstaller didn&#8217;t check for Lion (uname -r reporting 11.x).
So fix is easy, just edit uninstaller script <strong>/Library/Filesystems/fusefs.fs/Support/uninstall-macfuse-core.sh</strong> and add 11<em>) in case next to 10</em>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">OS_RELEASE</span><span class="o">=</span><span class="sb">`</span>/usr/bin/uname -r<span class="sb">`</span>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$OS_RELEASE&quot;</span> in
</span><span class='line'>  8*<span class="o">)</span>
</span><span class='line'>    log <span class="s2">&quot;Incorrect uninstall. Use the Tiger version please.&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'>    ;;
</span><span class='line'>  9*<span class="o">)</span>
</span><span class='line'>    <span class="nv">PACKAGE_RECEIPT</span><span class="o">=</span><span class="s2">&quot;$INSTALL_VOLUME/Library/Receipts/MacFUSE Core.pkg&quot;</span>
</span><span class='line'>    <span class="nv">OUTER_PACKAGE_RECEIPT</span><span class="o">=</span><span class="s2">&quot;$INSTALL_VOLUME/Library/Receipts/MacFUSE.pkg&quot;</span>
</span><span class='line'>    <span class="nv">BOMFILE</span><span class="o">=</span><span class="s2">&quot;$PACKAGE_RECEIPT/Contents/Archive.bom&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>  10*|11*<span class="o">)</span>
</span><span class='line'>     <span class="nv">PACKAGE_RECEIPT</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>     <span class="nv">BOMFILE</span><span class="o">=</span><span class="s2">&quot;$INSTALL_VOLUME/var/db/receipts/com.google.macfuse.core.bom&quot;</span>
</span><span class='line'>     ;;
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch rpm signing]]></title>
    <link href="http://hgomez.github.com/blog/2011/12/28/batch-rpm-signing/"/>
    <updated>2011-12-28T18:05:42+01:00</updated>
    <id>http://hgomez.github.com/blog/2011/12/28/batch-rpm-signing</id>
    <content type="html"><![CDATA[<p>I&#8217;m using <a href="http://jenkins-ci.org/">Jenkins</a> to build RPMs with free-style scripts.</p>

<p>Decent RPM packager should sign his RPMs so they could be checked by yum/zypper tools.</p>

<p>Here you could be in trouble since rpm signing require a password to be passed in command line :</p>

<p>[bash]
rpm &#8211;addsign -D &#8221;<em>signature gpg&#8221; -D &#8221;</em>gpg_name packagers@myforge.org&#8221; RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm<br />
Enter pass phrase:<br />
[/bash]</p>

<p>It&#8217;s quite problematic for a RPM build factory.</p>

<p>After digging around Internet, best solution appears to be using <a href="http://expect.sourceforge.net/">expect</a> and I developped a simple script for such purpose with following constraints :</p>

<ul>
<li><p>packager gpg name should be parametized (to avoid injecting it in ~/.rpmmacros)</p></li>
<li><p>gpg passphrase should be provided to command line (could be read from a secret file)</p></li>
</ul>


<p>[bash]</p>

<h1>!/usr/bin/expect -f</h1>

<p>#</p>

<h1>rpmsign-batch.expect : expect powered rpm signing command</h1>

<p>#</p>

<p>proc usage {} {</p>

<pre><code>    send_user "Usage: rpmsign-batch.expect gpgname passphrase rpmfile\n\n"
    exit
</code></pre>

<p>}</p>

<p>if {[llength $argv]!=3} usage</p>

<p>set gpgname [lrange $argv 0 0]
set passphrase [lrange $argv 1 1]
set rpmfile [lrange $argv 2 2]</p>

<p>send_user &#8220;passphrase=$passphrase gpgname=$gpgname\n&#8221;</p>

<p>spawn rpm &#8211;addsign -D &#8221;<em>signature gpg&#8221; -D &#8221;</em>gpg_name $gpgname&#8221; $rpmfile
expect -exact &#8220;Enter pass phrase: &#8221;
send &#8211; &#8220;$passphrase\r&#8221;
expect eof
[/bash]</p>

<p>You could then use it to sign rpms from your freestyle jobs like :</p>

<p>[bash]</p>

<h1>Password provided in clear in job (weird)</h1>

<p>rpmsign-batch.expect packagers@myforge.org mypassphrase RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm</p>

<h1>Password grabbed from a secret file (better)</h1>

<p>PASSPHRASE=<code>cat /my/secret-passphrase-file</code>
rpmsign-batch.expect packagers@myforge.org $PASSPHRASE RPMS/noarch/myjenkins-1.0.0-1.noarch.rpm
[/bash]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iozone and gnuplot 4.x]]></title>
    <link href="http://hgomez.github.com/blog/2011/11/03/iozone-and-gnuplot-4-x/"/>
    <updated>2011-11-03T20:16:40+01:00</updated>
    <id>http://hgomez.github.com/blog/2011/11/03/iozone-and-gnuplot-4-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.iozone.org/">Iozone </a> is a great tool to mesure performance of filesystem.
You could find 10 examples <a href="http://www.thegeekstuff.com/2011/05/iozone-examples/">here</a>.</p>

<p>In it latest version, 3.97, it came with reporting tools, <strong>report.pl</strong> and <strong>gengnuplot.sh</strong>, who use gnuplot to render images.</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/11/2d-recrewrite.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/11/2d-recrewrite.png" alt="" /></a></p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/11/recrewrite.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/11/recrewrite.png" alt="" /></a></p>

<p>Due to changes in GnuPlot 4.x, <strong>report.pl</strong> and <strong>gnu3d.dem</strong> need to be updated to works.
Also you may get only <strong>8 metrics</strong> in reports instead of <strong>15</strong> expected in latest release of <strong>report.pl</strong></p>

<h2>gnu3d.dem</h2>

<p>[perl]
#</p>

<h1>$Id: 3D plot of performance</h1>

<p>#</p>

<h1>Processes files that were created by Generate_Graphs</h1>

<h1>and displays the results. Also, saves a postscript copy.</h1>

<p>#</p>

<h1>Don Capps</h1>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set parametric
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;write/iozone_gen_out.gnuplot&#8217; title &#8220;Write performance&#8221;
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;write/write.ps&#8221;
splot &#8216;write/iozone_gen_out.gnuplot&#8217; title &#8220;Write performance&#8221;</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;rewrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;ReWrite performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;rewrite/rewrite.ps&#8221;
splot &#8216;rewrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;ReWrite performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;read/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Read performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;read/read.ps&#8221;
splot &#8216;read/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Read performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;reread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Reread performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;reread/reread.ps&#8221;
splot &#8216;reread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Reread performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;randread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Random read performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;randread/randread.ps&#8221;
splot &#8216;randread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Random read performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;randwrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Random write performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;randwrite/randwrite.ps&#8221;
splot &#8216;randwrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Random write performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;bkwdread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Read Backwards performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;bkwdread/bkwdread.ps&#8221;
splot &#8216;bkwdread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Read Backwards performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;recrewrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Record rewrite performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;recrewrite/recrewrite.ps&#8221;
splot &#8216;recrewrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Record rewrite performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;strideread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Stride read performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;strideread/strideread.ps&#8221;
splot &#8216;strideread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Stride read performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;fwrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Fwrite performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;fwrite/fwrite.ps&#8221;
splot &#8216;fwrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Fwrite performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;frewrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Frewrite performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;frewrite/frewrite.ps&#8221;
splot &#8216;frewrite/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Frewrite performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;fread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Fread performance&#8221; with lines
pause -1 &#8220;Hit return to continue&#8221;
set terminal postscript color
set output &#8220;fread/fread.ps&#8221;
splot &#8216;fread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Fread performance&#8221; with lines</p>

<p>set terminal x11
set title &#8220;Iozone performance&#8221;
set grid lt 2 lw 1
set surface
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in 2<sup>n</sup> KBytes&#8221;
set ylabel &#8220;Record size in 2<sup>n</sup> Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3
splot &#8216;freread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Freread performance&#8221; with lines
pause -1 &#8220;Hit return to exit&#8221;
set terminal postscript color
set output &#8220;freread/freread.ps&#8221;
splot &#8216;freread/iozone_gen_out.gnuplot&#8217; using 1:2:3 title &#8220;Freread performance&#8221; with lines
[/perl]</p>

<h2>report.pl</h2>

<p>[perl]</p>

<h1>!/usr/bin/perl</h1>

<p>#</p>

<h1>arguments: one of more report files</h1>

<p>#</p>

<h1>Christian Mautner <christian * mautner . ca>, 2005-10-31</h1>

<p>#</p>

<h1>This script is based loosely on the Generate_Graph set</h1>

<h1>of scripts that come with iozone, but is a complete re-write</h1>

<p>#</p>

<h1>The main reason to write this was the need to compare the behaviour of</h1>

<h1>two or more different setups, for tuning filesystems or</h1>

<h1>comparing different pieces of hardware.</h1>

<p>#</p>

<h1>This script is in the public domain, too short and too trivial</h1>

<h1>to deserve a copyright.</h1>

<p>#</p>

<h1>Simply run iozone like, for example, ./iozone -a -g 4G > config1.out (if your machine has 4GB)</h1>

<h1>and then run perl report.pl config1.out</h1>

<h1>or get another report from another box into config2.out and run</h1>

<h1>perl report.pl config1.out config2.out</h1>

<h1>the look in the report_* directory for .png</h1>

<p>#</p>

<h1>If you don&#8217;t like png or the graphic size, search for &#8220;set terminal&#8221; in this file and put whatever gnuplot</h1>

<h1>terminal you want. Note I&#8217;ve also noticed that gnuplot switched the set terminal png syntax</h1>

<h1>a while back, you might need &#8220;set terminal png small size 900,700&#8221;</h1>

<p>#</p>

<p>@Reports=@ARGV;</p>

<p>die &#8220;usage: $0 &lt;iozone.out> [&lt;iozone2.out>&#8230;]\n&#8221; if not @Reports or grep (m|<sup>-|,</sup> @Reports);</p>

<p>die &#8220;report files must be in current directory&#8221; if grep (m|/|, @Reports);</p>

<p>%columns=(</p>

<pre><code>     'write'     =&gt;3,
     'read'      =&gt;5,
     'rewrite'   =&gt;4,
     'reread'    =&gt;6,
     'randread'  =&gt;7,
     'randwrite' =&gt;8,
     'bkwdread'  =&gt;9,
     'recrewrite'=&gt;10,
     'strideread'=&gt;11,
     'fwrite'    =&gt;12,
     'frewrite'  =&gt;13,
     'fread'     =&gt;14,
     'freread'   =&gt;15,
     );
</code></pre>

<p>#</p>

<h1>create output directory. the name is the concatenation</h1>

<h1>of all report file names (minus the file extension, plus</h1>

<h1>prefix report_)</h1>

<p>#
$outdir=&#8221;report<em>&#8220;.join(&#8221;</em>&#8220;,map{/([<sup>.]+)(..*)?/</sup> &amp;&amp; $1}(@Reports));</p>

<p>print STDERR &#8220;Output directory: $outdir &#8220;;</p>

<p>if ( -d $outdir )
{</p>

<pre><code>print STDERR "(removing old directory) "; 
system "rm -rf $outdir";
</code></pre>

<p>}</p>

<p>mkdir $outdir or die &#8220;cannot make directory $outdir&#8221;;</p>

<p>print STDERR &#8220;done.\nPreparing data files&#8230;&#8221;;</p>

<p>foreach $report (@Reports)
{</p>

<pre><code>open(I, $report) or die "cannot open $report for reading";
$report=~/^([^\.]+)/;
$datafile="$1.dat";
push @datafiles, $datafile;
open(O, "&gt;$outdir/$datafile") or die "cannot open $outdir/$datafile for writing";
open(O2, "&gt;$outdir/2d-$datafile") or die "cannot open $outdir/$datafile for writing";
while(&lt;I&gt;)
{
    next unless ( /^[\s\d]+$/ );
    @split = split();
    # We may have only 7 metrics (no block entries). Replaced == 15 with &gt;=8
    next unless ( @split &gt;= 8 );
    print O;
    print O2 if $split[1] == 16384 or $split[0] == $split[1];
}
close I, O, O2;
</code></pre>

<p>}</p>

<p>print STDERR &#8220;done.\nGenerating graphs:&#8221;;</p>

<p>foreach $column (keys %columns)
{</p>

<pre><code>print STDERR " $column";

open(G, "&gt;$outdir/$column.do") or die "cannot open $outdir/$column.do for writing";
print G qq{
</code></pre>

<p>set title &#8220;Iozone performance: $column&#8221;
set grid lt 2 lw 1
set surface
set parametric
set xtics
set ytics
set logscale x 2
set logscale y 2
set autoscale z</p>

<h1>set xrange [2.<strong>5:2.</strong>24]</h1>

<p>set xlabel &#8220;File size in KBytes&#8221;
set ylabel &#8220;Record size in Kbytes&#8221;
set zlabel &#8220;Kbytes/sec&#8221;</p>

<h1>set data style lines</h1>

<p>set style data lines
set dgrid3d 80,80,3</p>

<h1>set terminal png small picsize 900 700</h1>

<p>set terminal png small size 900 700
set output &#8220;$column.png&#8221;
};</p>

<pre><code>print G "splot ". join(", ", map{qq{"$_" using 1:2:$columns{$column} title "$_"}}(@datafiles));

print G "\n";

close G;

open(G, "&gt;$outdir/2d-$column.do") or die "cannot open $outdir/$column.do for writing";
print G qq{
</code></pre>

<p>set title &#8220;Iozone performance: $column&#8221;</p>

<h1>set terminal png small picsize 450 350</h1>

<p>set terminal png small size 450 350
set logscale x
set xlabel &#8220;File size in KBytes&#8221;
set ylabel &#8220;Kbytes/sec&#8221;
set output &#8220;2d-$column.png&#8221;
};</p>

<pre><code>print G "plot ". join(", ", map{qq{"2d-$_" using 1:$columns{$column} title "$_" with lines}}(@datafiles));

print G "\n";

close G;

if ( system("cd $outdir &amp;&amp; gnuplot $column.do &amp;&amp; gnuplot 2d-$column.do") )
{
    print STDERR "(failed) ";
}
else
{
    print STDERR "(ok) ";
}
</code></pre>

<p>}</p>

<p>print STDERR &#8220;done.\n&#8221;;
[/perl]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servlet containers, startup time]]></title>
    <link href="http://hgomez.github.com/blog/2011/07/15/servlet-containers-startup-time/"/>
    <updated>2011-07-15T02:11:03+02:00</updated>
    <id>http://hgomez.github.com/blog/2011/07/15/servlet-containers-startup-time</id>
    <content type="html"><![CDATA[<p>With the release of JBoss AS7, we see many comments around about the startup time of Application Servers.
Even if this appears marginal in real life (an application server is expected to run 24/24 7/7), there is area where startup time is still important like for developpers. In developpment phase, when you have to start/stop your server dozens of times by day, you need fastest start time as possible.</p>

<p>I conducted a very basic and simple test on my MacBook Pro, take various application servers and servlet containers and measure their startup time.</p>

<p>And in this days of Java 7 fever, try these servers with OpenJDK 7 (OS/X version).</p>

<h3>Results on MacBook Pro - Core2Duo 2.66Ghz</h3>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/07/Startup6.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/07/Startup6-1024x473.png" alt="Startup Time of App Servers (3rd try)" /></a></p>

<p>all time in millisecondes</p>

<h3>Remarks</h3>

<ul>
<li><p>JBoss AS 6 (minimal profile) startup time was about 27s. I didn&#8217;t include it in graph to keep a good scale for others engines</p></li>
<li><p>JBoss AS6 seems to start well with OpenJDK 7 but was a bit long to stop, so I had to kill the process</p></li>
<li><p>JBoss AS7 web-profile and non certified full edition came with no webapp, so a bit less works at startup since no webapp has to be deployed and managed. Injecting a basic webapp take an extra 30ms on next starts.</p></li>
<li><p>All servers performed pretty the same under Apple JDK 1.6.0-26 and OpenJDK 7.</p></li>
</ul>


<h3>Conclusions</h3>

<ul>
<li><p>Jetty is still the fastest container to start around.</p></li>
<li><p>Apache Tomcat team does a good job on Apache Tomcat 7, near twice faster than Apache Tomcat 6 in startup time and not too far than Jetty.</p></li>
<li><p>JBoss AS7 startup speed improvements are tremendous, about 13 times faster than its predecessor JBoss AS6, congrats guys !</p></li>
</ul>


<p>Raw startup time data available <a href="http://blog.hgomez.net/wp-content/uploads/2011/07/appserver-startup2.txt">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Universal Apache Tomcat Native Library on OS/X]]></title>
    <link href="http://hgomez.github.com/blog/2011/07/13/building-universal-apache-tomcat-native-library-on-osx/"/>
    <updated>2011-07-13T17:41:08+02:00</updated>
    <id>http://hgomez.github.com/blog/2011/07/13/building-universal-apache-tomcat-native-library-on-osx</id>
    <content type="html"><![CDATA[<p>I recently notice that my Apache Tomcat running on OS/X 10.6.8 couldn&#8217;t use Apache Tomcat Native Library.</p>

<p>[bash]
INFO: The APR based Apache Tomcat Native library which allows optimal
performance in production environments was not found on the
java.library.path:
.:/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java
Jul 13, 2011 11:02:30 AM org.apache.coyote.http11.Http11Protocol init
[/bash]</p>

<p>After digging around and with the help of ASFer Mladen Turk, I figure my previous build was stick to 64bits mode only and I switched my JVM to 32bits mode using -d32.</p>

<p>The fix was then easy, just had to rebuild tomcat-native and asking OS/X gcc to produce both 32/64 bits model library using the following CLFAGS/APXSLDFLAGS.</p>

<p>[bash]
CFLAGS=&#8217;-arch i386 -arch x86_64&#8217; APXSLDFLAGS=&#8217;-arch i386-arch x86_64&#8217;
[/bash]</p>

<p>Here is a small script I&#8217;m using now to produce Apache Tomcat Native Library on OS/X.</p>

<p>[bash]
curl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/native/1.1.23/source/tomcat-native-1.1.23-src.tar.gz -o tomcat-native-1.1.23-src.tar.gz
tar xvzf tomcat-native-1.1.23-src.tar.gz
cd tomcat-native-1.1.23-src/jni/native</p>

<p>CFLAGS=&#8217;-arch i386 -arch x86_64&#8217; APXSLDFLAGS=&#8217;-arch i386 -arch x86_64&#8217; ./configure &#8211;with-apr=/usr &#8211;with-ssl=/usr &#8211;with-java-home=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home &#8211;with-apxs=/usr/sbin/apxs
make clean
make</p>

<p>sudo cp .libs/libtcnative-1.0.1.23.dylib /usr/lib/java
sudo rm -f  /usr/lib/java/libtcnative-1.dylib
sudo ln -s /usr/lib/java/libtcnative-1.0.1.23.dylib /usr/lib/java/libtcnative-1.dylib
[/bash]</p>

<h3>A note about Lion</h3>

<p>If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.7, Java headers are not on the usual location and you could find them under <strong>/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers</strong></p>

<p>You should then update the <strong>configure</strong> command line like this :
[bash]
CFLAGS=&#8217;-arch i386 -arch x86_64&#8217; APXSLDFLAGS=&#8217;-arch i386 -arch x86_64&#8217; ./configure &#8211;with-apr=/usr &#8211;with-apxs=/usr/sbin/apxs &#8211;with-ssl=/usr &#8211;with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/
[/bash]</p>

<p>Lion came with Xcode 4.1 and there is also an impact on linker side, libtcnative is now produced as <strong>libtcnative-1.0.dylib</strong></p>

<p>Commands became so :</p>

<p>[bash]
curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/1.1.23/source/tomcat-native-1.1.23-src.tar.gz -o tomcat-native-1.1.23-src.tar.gz
tar xvzf tomcat-native-1.1.23-src.tar.gz
cd tomcat-native-1.1.23-src/jni/native</p>

<p>CFLAGS=&#8217;-arch i386 -arch x86_64&#8217; APXSLDFLAGS=&#8217;-arch i386 -arch x86_64&#8217; ./configure &#8211;with-apr=/usr &#8211;with-apxs=/usr/sbin/apxs &#8211;with-ssl=/usr &#8211;with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/
make clean
make</p>

<p>sudo cp .libs/libtcnative-1.0.dylib /usr/lib/java
sudo rm -f  /usr/lib/java/libtcnative-1.dylib
sudo ln -s /usr/lib/java/libtcnative-1.0.dylib /usr/lib/java/libtcnative-1.dylib
[/bash]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple JDK’s / OpenJDK's – Core2Duo vs Core i7]]></title>
    <link href="http://hgomez.github.com/blog/2011/04/18/apple-jdke28099s-openjdks-e28093-core2duo-vs-core-i7/"/>
    <updated>2011-04-18T21:39:20+02:00</updated>
    <id>http://hgomez.github.com/blog/2011/04/18/apple-jdke28099s-openjdks-e28093-core2duo-vs-core-i7</id>
    <content type="html"><![CDATA[<p>Previously I did benchmark of Apple VMs and OpenJDK 6 and I wanted to see how all of the JVMs available today on our Mac on two systems, an old Core2Duo and a newer Core i7. And also see how they perform 32 / 64 bits kernel mode.</p>

<p>So I redo full dacapo bench suite to include OpenJDK 6, and we have now 5 VMs (3 Java 6 and 2 Java 7) :</p>

<ul>
<li><p>Apple Java 1.6.0_22 - Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)</p></li>
<li><p>Apple Java 1.6.0_24 - Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)</p></li>
<li><p>OpenJDK 7 bsd-port - OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)</p></li>
<li><p>OpenJDK 7 macosx-port - OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)</p></li>
<li><p>OpenJDK 6 macports - OpenJDK 64-Bit Server VM (build 17.0-b16, mixed mode)</p></li>
</ul>


<h3>Results on MacBook Pro - Core2Duo 2.66Ghz - 32bits kernel</h3>

<p>[table id=6 /]</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/04/BenchJVMs-MBP.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/04/BenchJVMs-MBP-1024x555.png" alt="" /></a></p>

<h3>Results on iMac - Core i7 2.8Ghz -  64bits kernel</h3>

<p>[table id=5 /]</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/04/BenchIMac.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/04/BenchIMac-1024x549.png" alt="" /></a></p>

<h2>Conclusion</h2>

<p>As seen if <a href="http://blog.hgomez.net/2011/04/16/apple-jdks-openjdk-back-to-benchs/">previous article</a>,  latest Apple JVM, 1.6.0-24 perform better than the old 1.6.0-22, and still behind OpenJDK 7 and even OpenJDK 6.  OpenJDK 7 bsd-port is still faster (by a small factor) than OpenJDK 7 from macosx-port (built with LLVM), in both simple threaded (Core2Duo, 2 cores) and large threaded (i7 4 cores with hyperthreading).</p>

<p>This benchmark show how good is <a href="http://ark.intel.com/Product.aspx?id=41316">Intel Core i7</a> comparing to previous generation <a href="http://ark.intel.com/Product.aspx?id=37130&amp;code=T9550">Intel Core2Duo</a>, roughly twice as fast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple JDK's / OpenJDK - back to benchs]]></title>
    <link href="http://hgomez.github.com/blog/2011/04/16/apple-jdks-openjdk-back-to-benchs/"/>
    <updated>2011-04-16T16:52:06+02:00</updated>
    <id>http://hgomez.github.com/blog/2011/04/16/apple-jdks-openjdk-back-to-benchs</id>
    <content type="html"><![CDATA[<p>It&#8217;s good to see works in progress for Aqua/Cocoa - AWT ports but what about JVM performances ?</p>

<h2>Test vms</h2>

<p>I selected 4 VMs to be tested</p>

<p><code>
Apple Java 1.6.0_22 - java version "1.6.0_22"
Java(TM) SE Runtime Environment (build 1.6.0_22-b04-314-10M3406a)
Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03-314, mixed mode)
</code></p>

<p><code>
Apple Java 1.6.0_24 - java version "1.6.0_24"
Java(TM) SE Runtime Environment (build 1.6.0_24-b07-348-10M3406a)
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02-348, mixed mode)
</code></p>

<p><code>
OpenJDK 7 bsd-port - openjdk version "1.7.0-internal"
OpenJDK Runtime Environment (build 1.7.0-internal-henri_2011_04_11_08_24-b00)
OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)
</code></p>

<p><code>
OpenJDK 7 macosx-port - openjdk version "1.7.0-internal"
OpenJDK Runtime Environment (build 1.7.0-internal-b00)
OpenJDK 64-Bit Server VM (build 21.0-b07, mixed mode)
</code></p>

<h2>Test system</h2>

<p>My test system is an Apple iMac (iMac11,1 )  with Intel i7 2.80Ghz and 8Gb DDR3 1067Mhz, running under SnowLeopard 10.6.7 64bits.
I wanted to test 64bits VMs on a 64bits machine and this time use a stronger processor with more threads (ie: 4 cores with hyperthreading).</p>

<h3>DaCapo Benchmarks</h3>

<p>I keep the <a href="http://www.dacapobench.org/">DaCapo 9.12-bach</a>.</p>

<p>Bench tests launched with -n X, ie (java -jar dacapo-9.12-bach.jar -n 10 pmd)</p>

<p>[table id=4 /]</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/04/Benchs4.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/04/Benchs4-1024x576.png" alt="" /></a></p>

<h2>Conclusion</h2>

<p>Latest Apple JVM, 1.6.0-24 perform better than the old 1.6.0-22 in all of the tests and is near OpenJDK 7 results.</p>

<p>OpenJDK 7 from the bsd-port perform a little better than the macosx-port. The main difference in build is bsd-port is using stock gcc whereas macos-port use llvm-gcc.</p>

<h3>bsd-port using stock-gcc during OpenJDK build</h3>

<p>[bash]
Compiling /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/adlc/arena.cpp
rm -f ../generated/adfiles/arena.o
/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/ALT_COMPILER_PATH/g++ -D_ALLBSD_SOURCE -D_GNU_SOURCE -DAMD64 -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/prims -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/cpu/x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/os_cpu/bsd_x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/os/bsd/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/os/posix/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/adlc -I../generated -DASSERT -DTARGET_OS_FAMILY_bsd -DTARGET_ARCH_x86 -DTARGET_ARCH_MODEL_x86_64 -DTARGET_OS_ARCH_bsd_x86 -DTARGET_OS_ARCH_MODEL_bsd_x86_64 -DTARGET_COMPILER_gcc -DCOMPILER2 -DCOMPILER1  -fno-rtti -fno-exceptions -pthread -fcheck-new -m64 -pipe -Werror -g -c -o ../generated/adfiles/arena.o /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-bsdport-x86_64/workspace/hotspot/src/share/vm/adlc/arena.cpp
[/bash]</p>

<h3>macosx-port using llvm-gcc during OpenJDK build</h3>

<p>[bash]
Compiling /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/adlc/arena.cpp
rm -f ../generated/adfiles/arena.o
llvm-g++ -D_ALLBSD_SOURCE -D_GNU_SOURCE -DIA32 -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/prims -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/cpu/x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/os_cpu/bsd_x86/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/os/bsd/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/os/posix/vm -I/Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/adlc -I../generated -DASSERT -DTARGET_OS_FAMILY_bsd -DTARGET_ARCH_x86 -DTARGET_ARCH_MODEL_x86_32 -DTARGET_OS_ARCH_bsd_x86 -DTARGET_OS_ARCH_MODEL_bsd_x86_32 -DTARGET_COMPILER_gcc -DCOMPILER2 -DCOMPILER1  -fno-rtti -fno-exceptions -pthread -fcheck-new -m32 -march=i586 -mstackrealign -pipe -Werror -g -c -o ../generated/adfiles/arena.o /Users/henri/Documents/jenkins/data/jobs/openjdk-1.7-macosx-universal/workspace/hotspot/src/share/vm/adlc/arena.cpp
[/bash]</p>

<p>Performances gain in OpenJDK7 VM vs latest Apple 6 VM is smaller than previously (see previous articles on Apple JDK vs OpenJDK 6), switching to OpenJDK 7 will not be only for pure speed but for functionalities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenJDK 7 on OS/X and IntelliJ IDEA EAP]]></title>
    <link href="http://hgomez.github.com/blog/2011/04/16/openjdk-7-on-osx-first-swing-app/"/>
    <updated>2011-04-16T16:16:27+02:00</updated>
    <id>http://hgomez.github.com/blog/2011/04/16/openjdk-7-on-osx-first-swing-app</id>
    <content type="html"><![CDATA[<p>During the last weeks, Apple started to contribute it&#8217;s Aqua/Cocoa port to OpenJDK 7 on the macosx-port branch. It&#8217;s still works it progress but it was nice to see some SWING apps like IntelliJ IDEA works on the preliminary release.</p>

<p>I used IntelliJ IDEA EAP (10.5) and tweaked it&#8217;s startup shell.sh to define AWT_TOOLKIT=CToolkit and add -Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel since Aqua Look and Feel is not default for now.</p>

<p>[bash]
export CLASSPATH</p>

<p>LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH
export LD_LIBRARY_PATHAWT_TOOLKIT</p>

<h1>AWT/Cocoa port for OpenJDK 7 macosx-port</h1>

<p>export=CToolkit
JVM_ARGS=&#8221;-Dswing.defaultlaf=com.apple.laf.AquaLookAndFeel $JVM_ARGS&#8221;</p>

<p>cd &#8220;$IDEA_BIN_HOME&#8221;
while true ; do
  $IDEA_JDK/bin/java $JVM_ARGS -Djb.restart.code=88 $IDEA_MAIN_CLASS_NAME $*
  test $? -ne 88 &amp;&amp; break
done</p>

<p>[/bash]</p>

<p>Then defined OpenJDK 7 from macosx port (available <a href="http://openjdk-osx-build.googlecode.com/files/OpenJDK-OSX-1.7-universal-20110416.dmg">here</a>) as default JVM and started IntelliJ by calling its shell script :</p>

<p>[bash]
export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home
/Applications/IdeaX-IU-106.396.app/bin/idea.sh
[/bash]</p>

<p>And I could see a Swing based application running on OpenJDK 7 and OS/X.</p>

<p><a href="http://blog.hgomez.net/wp-content/uploads/2011/04/IntelliJ-OpenJDK7-UI.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/04/IntelliJ-OpenJDK7-UI-1024x745.png" alt="" /></a></p>

<p>IntelliJ IDEA is so the second major IDE to be compatible with OpenJDK 7 and OS/X - Cocoa, first one was Eclipse thanks to it&#8217;s SWT/Cocoa bridge.
I tested with both NetBeans 7 RC1 and RC2 but it didn&#8217;t works. I hope it will be fixed in NetBeans 7 final release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat Maven Plugin and Apache Tomcat post 6.0.29 ]]></title>
    <link href="http://hgomez.github.com/blog/2011/03/11/maven-tomcat-plugin-and-post-6-0-29-tomcat/"/>
    <updated>2011-03-11T13:56:04+01:00</updated>
    <id>http://hgomez.github.com/blog/2011/03/11/maven-tomcat-plugin-and-post-6-0-29-tomcat</id>
    <content type="html"><![CDATA[<p>If you&#8217;re using the <a href="http://mojo.codehaus.org/tomcat-maven-plugin/">Tomcat Maven Plugin</a> and want to use post 6.0.29  Apache Tomcat, ie latest 6.0.32, you should update your pom to handle a change in artifact.</p>

<p>Up to 6.0.29, Eclipse JDT compiler was bundled as jasper-jdt :</p>

<p>[xml]
<dependency></p>

<pre><code>          &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
          &lt;artifactId&gt;jasper-jdt&lt;/artifactId&gt;
          &lt;version&gt;6.0.29&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>

<p>[/xml]</p>

<p>With <a href="http://tomcat.apache.org/tomcat-6.0-doc/changelog.html">6.0.30</a>, Apache Tomcat team started to bundle Eclipse JDT directly:</p>

<p>[xml]
<dependency>
  <groupId>org.eclipse.jdt.core.compiler</groupId>
  <artifactId>ecj</artifactId>
  <version>3.5.1</version>
</dependency>
[/xml]</p>

<p>As consequence, org.apache.tomcat/jasper-jdt artifact didn&#8217;t exist anymore after release 6.0.29.</p>

<p>[caption id=&#8221;attachment_742&#8221; align=&#8221;alignnone&#8221; width=&#8221;743&#8221; caption=&#8221;Jasper JDT up to 6.0.29&#8221;]<a href="http://blog.hgomez.net/wp-content/uploads/2011/03/jasper-jdt.png"><img src="http://blog.hgomez.net/wp-content/uploads/2011/03/jasper-jdt.png" alt="Jasper JDT up to 6.0.29" /></a>[/caption]</p>

<p>For Tomcat Maven Plugin, you should update the <a href="http://mojo.codehaus.org/tomcat-maven-plugin/examples/adjust-embedded-tomcat-version.html">suggested pom</a> like this :</p>

<p>[xml]</p>

<pre><code>&lt;build&gt;
    &lt;pluginManagement&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                &lt;artifactId&gt;tomcat-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;1.2-SNAPSHOT&lt;/version&gt;
                &lt;dependencies&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;catalina&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;catalina-ha&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;tribes&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;el-api&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;jasper&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;jasper-el&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt;
                        &lt;artifactId&gt;ecj&lt;/artifactId&gt;
                        &lt;version&gt;3.5.1&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;coyote&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
                        &lt;artifactId&gt;dbcp&lt;/artifactId&gt;
                        &lt;version&gt;${tomcat.version}&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
</code></pre>

<p>[/xml]</p>

<h3>Notice: An updated version of Tomcat Maven Plugin 1.2-SNAPSHOT has been released, this hack is no more necessary</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenJDK 1.7 for OS/X benchs]]></title>
    <link href="http://hgomez.github.com/blog/2010/12/04/openjdk-1-7-for-osx-benchs/"/>
    <updated>2010-12-04T11:17:10+01:00</updated>
    <id>http://hgomez.github.com/blog/2010/12/04/openjdk-1-7-for-osx-benchs</id>
    <content type="html"><![CDATA[<p>After building and packaging OpenJDK 1.7 for OS/X, I wanted to see how performed new VMs.</p>

<h2>Test vms</h2>

<p>Recents OpenJDK 1.7 32 and 64bits where used :</p>

<p><code>
openjdk version "1.7.0-internal"
OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_46-b00)
OpenJDK Server VM (build 20.0-b02, mixed mode)
</code></p>

<p><code>
openjdk version "1.7.0-internal"
OpenJDK Runtime Environment (build 1.7.0-internal-henri_2010_12_01_00_49-b00)
OpenJDK 64-Bit Server VM (build 20.0-b02, mixed mode)
</code></p>

<h2>Test system</h2>

<p>My test system is an Apple Mac Book Pro (MacBookPro5,1) with Intel Core 2 Duo 2.66Ghz and 4Gb DDR3 1067Mhz, running under SnowLeopard 10.6.5 32bits.</p>

<h3>DaCapo Benchmarks</h3>

<p>I used again <a href="http://www.dacapobench.org/">DaCapo 9.12-bach</a>, discarding <strong>batik</strong> test, this one requiring a working AWT/Swing support .</p>

<p>Bench tests launched with -n X, ie (java -jar dacapo-9.12-bach.jar -n 10 pmd)</p>

<p>[table id=3 /]</p>

<h2>Conclusion</h2>

<p>Good news, two tests <strong>Tomcat</strong> and <strong>tradebeans</strong> now pass the bench</p>

<p>OpenJDK 1.7 64bits perform better than OpenJDK 1.7 32bits and OpenJDK 6.</p>

<p>Even if OpenJDK 1.7 32bits performances are better than Apple Java 6, it&#8217;s allways behind OpenJDK 1.7 64bits version on OS/X, so you should select the 64bits version if performance is the key for your use.</p>

<p>Next article will cover OpenJDK 1.7 and <a href="http://openjdk.java.net/jtreg/">jtreg</a>, the Regression Test Harness for the OpenJDK platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenJDK 1.7 for OS/X continuous build with Hudson – Episode 3]]></title>
    <link href="http://hgomez.github.com/blog/2010/11/26/openjdk-1-7-for-osx-continuous-build-with-hudson-e28093-episode-3/"/>
    <updated>2010-11-26T10:55:36+01:00</updated>
    <id>http://hgomez.github.com/blog/2010/11/26/openjdk-1-7-for-osx-continuous-build-with-hudson-e28093-episode-3</id>
    <content type="html"><![CDATA[<p>Gildas and I create a project on GoogleCode where we&#8217;ll maintain build/package scripts and provide packages.</p>

<p>My Dropbox download page was overloaded and we needed another location, here is it :</p>

<p><a href="http://code.google.com/p/openjdk-osx-build/">http://code.google.com/p/openjdk-osx-build/</a></p>

<p>Contributors are very welcome, especially OS/X gurus</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenJDK 1.7 for OS/X continuous build with Hudson - Episode 2]]></title>
    <link href="http://hgomez.github.com/blog/2010/11/25/openjdk-1-7-for-osx-continuous-build-with-hudson-episode-2/"/>
    <updated>2010-11-25T22:49:48+01:00</updated>
    <id>http://hgomez.github.com/blog/2010/11/25/openjdk-1-7-for-osx-continuous-build-with-hudson-episode-2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.hgomez.net/?p=670">First episode</a> of OpenJDK 1.7 for OS/X covered build of 32 and 64 bits VM via Hudson.</p>

<p>We ended with two VMs, 32bits was under build/bsd-i586/j2sdk-image and 64bits in build/bsd-amd64/j2sdk-image
And here appears a new OS/X jedi, <a href="http://www.hikage.be/">Gildas</a>, providing .PKG and .DMG scripting.</p>

<p>This episode will describe how packaging, PKG and DMG was done.</p>

<h2>OS/X Package .PKG</h2>

<p>First we need to transform j2sdk-image folder into .PKG</p>

<p>We used OS/X <strong>packagemaker</strong>, provided by <strong>XCode</strong> :</p>

<p>[bash]
  /Developer/usr/bin/packagemaker \</p>

<pre><code>--title "Open JDK 7 (32bits) for OS X Installer" \
--version 1.0 \
--filter "\.DS_Store" \
--root-volume-only \
--domain system \
--verbose \
--no-relocate \
-l "/Library/Java/JavaVirtualMachines/openjdk-1.7-i586" \
--target 10.5 \
--id net.openjdk.java.i586.pkg \
--root ${SOURCE_DIR} \
--out ${BUILD_DIR}/openjdk-1.7-i586.pkg \
-v
</code></pre>

<p>[/bash]</p>

<h2>From .PKG to .DMG</h2>

<p>Next step is to transform the <strong>.PKG</strong> into a mountable image <strong>.DMG</strong>.
Here we used hdiutil :</p>

<p>[bash]
  hdiutil create -srcfolder ${BUILD_DIR}/openjdk-1.7-i586.pkg -volname &#8216;Open JDK 7 (32bits)&#8217; -fs HFS+ -fsargs &#8216;-c c=64,a=16,e=16&#8217; -format UDRW ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg
  hdiutil convert ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg -format UDZO -imagekey zlib-level=9 -o ${BUILD_DIR}/OpenJDK-1.7-i586.dmg
[/bash]</p>

<h2>Scripts for 32 and 64bits VM</h2>

<p>The following scripts could be added at the end of the Hudson script zone, or called in a second pass.</p>

<h3>32bits</h3>

<p>[bash]</p>

<h1>!/bin/bash</h1>

<p>SOURCE_DIR=<code>pwd</code>/build/bsd-i586/j2sdk-image
BUILD_DIR=<code>pwd</code>/java-osx
DMG_MOUNT_DIR=$BUILD_DIR/mount</p>

<p>mkdir -p ${BUILD_DIR}</p>

<p>if [ -x build/bsd-i586/j2sdk-image/bin/java ]; then</p>

<p>  rm -f ${BUILD_DIR}/OpenJDK-1.7-i586.dmg ${BUILD_DIR}/openjdk-1.7-i586.pkg</p>

<p>  /Developer/usr/bin/packagemaker \</p>

<pre><code>--title "Open JDK 7 (32bits) for OS X Installer" \
--version 1.0 \
--filter "\.DS_Store" \
--root-volume-only \
--domain system \
--verbose \
--no-relocate \
-l "/Library/Java/JavaVirtualMachines/openjdk-1.7-i586" \
--target 10.5 \
--id net.openjdk.java.i586.pkg \
--root ${SOURCE_DIR} \
--out ${BUILD_DIR}/openjdk-1.7-i586.pkg \
-v
</code></pre>

<p>  hdiutil create -srcfolder ${BUILD_DIR}/openjdk-1.7-i586.pkg -volname &#8216;Open JDK 7 (32bits)&#8217; -fs HFS+ -fsargs &#8216;-c c=64,a=16,e=16&#8217; -format UDRW ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg
  hdiutil convert ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg -format UDZO -imagekey zlib-level=9 -o ${BUILD_DIR}/OpenJDK-1.7-i586.dmg</p>

<p>  rm -f ${BUILD_DIR}/openjdk-1.7-i586-tmp.dmg</p>

<p>else</p>

<p>  echo &#8220;no valid exec under build/bsd-i586/j2sdk-image/bin/java, packaging skipped&#8221;</p>

<p>fi
[/bash]</p>

<h3>64bits</h3>

<p>[bash]</p>

<h1>!/bin/bash</h1>

<p>SOURCE_DIR=<code>pwd</code>/build/bsd-amd64/j2sdk-image
BUILD_DIR=<code>pwd</code>/java-osx
DMG_MOUNT_DIR=$BUILD_DIR/mount</p>

<p>mkdir -p ${BUILD_DIR}</p>

<p>if [ -x build/bsd-amd64/j2sdk-image/bin/java ]; then</p>

<p>  rm -f ${BUILD_DIR}/OpenJDK-1.7-x86_64.dmg ${BUILD_DIR}/openjdk-1.7-x86_64.pkg</p>

<p>  /Developer/usr/bin/packagemaker \</p>

<pre><code>--title "Open JDK 7 (64bits) for OS X Installer" \
--version 1.0 \
--filter "\.DS_Store" \
--root-volume-only \
--domain system \
--verbose \
--no-relocate \
-l "/Library/Java/JavaVirtualMachines/openjdk-1.7-x86_64" \
--target 10.5 \
--id net.openjdk.java.x86_64.pkg \
--root ${SOURCE_DIR} \
--out ${BUILD_DIR}/openjdk-1.7-x86_64.pkg \
-v
</code></pre>

<p>  hdiutil create -srcfolder ${BUILD_DIR}/openjdk-1.7-x86_64.pkg -volname &#8216;Open JDK 7 (64bits)&#8217; -fs HFS+ -fsargs &#8216;-c c=64,a=16,e=16&#8217; -format UDRW ${BUILD_DIR}/openjdk-1.7-x86_64-tmp.dmg
  hdiutil convert ${BUILD_DIR}/openjdk-1.7-x86_64-tmp.dmg -format UDZO -imagekey zlib-level=9 -o ${BUILD_DIR}/OpenJDK-1.7-x86_64.dmg</p>

<p>  rm -f ${BUILD_DIR}/openjdk-1.7-x86_64-tmp.dmg</p>

<p>else</p>

<p>  echo &#8220;no valid exec under build/bsd-amd64/j2sdk-image/bin/java, packaging skipped&#8221;</p>

<p>fi
[/bash]</p>

<h2>Next Step</h2>

<p>Gildas and I, will continue to improve these basic .PKG/.DMG scripts and OS/X gurus advices are more than welcome.</p>

<p>Next steps is to find storage on the net so we could provide DMG regularly. Even better, an OS/X box (under SnowLeopard) available on the net, will help us provide continuous DMG.</p>

<p>Plus on est de fous, &#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenJDK 1.7 for OS/X continuous build with Hudson]]></title>
    <link href="http://hgomez.github.com/blog/2010/11/21/openjdk-1-7-for-osx-continuous-build-with-hudson/"/>
    <updated>2010-11-21T03:06:22+01:00</updated>
    <id>http://hgomez.github.com/blog/2010/11/21/openjdk-1-7-for-osx-continuous-build-with-hudson</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
