<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS/X | Rico's Blog]]></title>
  <link href="http://hgomez.github.com/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://hgomez.github.com/"/>
  <updated>2012-10-01T07:52:18+02:00</updated>
  <id>http://hgomez.github.com/</id>
  <author>
    <name><![CDATA[Henri Gomez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding java from command line on OSX]]></title>
    <link href="http://hgomez.github.com/blog/2012/07/20/understanding-java-from-command-line-on-osx/"/>
    <updated>2012-07-20T20:57:06+02:00</updated>
    <id>http://hgomez.github.com/blog/2012/07/20/understanding-java-from-command-line-on-osx</id>
    <content type="html"><![CDATA[<h1>Java on OSX</h1>

<p>OSX is a good platform for Java development but also running Java applications. Sadly XServe servers are no more available but in many cases Mac Mini could to pretty good works as Java server applications.</p>

<p>For a long time, OSX Java was maintained by Apple, from Sun Hotspot and was often a bit late vs Windows/Linux releases.</p>

<p>With Lion, Apple announced that they won't produce Java for their futures OS, starting with Mountain Lion (10.8) and Oracle will do the job as they did for major distributions.</p>

<p>OpenJDK project included OSX support more than one year ago and there is now a very good coverage of Java for OSX.</p>

<p>It take some time to see first official Java 7 from Oracle on OSX, for Lion only, but there was community alternatives like <a href="http://code.google.com/p/openjdk-osx-build/">openjdk-osx-build</a>, where you could find a large choice of OpenJDK for OSX (7, 8, 8 with Lambda, 8 with Jigsaw).</p>

<p>If you install Java's from <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle</a> or <a href="http://code.google.com/p/openjdk-osx-build/downloads/list">openjdk-osx-build</a>, you may want to know how to select one of them for your application and even select a specific one for some of your applications.</p>

<h1>Java Preferences</h1>

<p>Apple provide a good tool to select default JVM, Java Preferences :</p>

<p><img class="center" src="/images/JavaPreferences.png" title="[Java Preferences [Java Preferences]]" ></p>

<p>In this screenshot you could see many JVM, from many sources, <strong>Apple, Oracle</strong> and <strong>openjdk-osx-build</strong> and default ordering Java (from up to bottom).</p>

<p>Here you'll see that default JVM will be Apple Java 1.6.0_33-b03-424 in 64bits, next choice will be Apple Java 1.6.0_33-b03-424 in 32bits. You will notice these JVM are marked as System, more on this later.</p>

<p>Next you'll find Apple Java 1.6.0_31 in 64 and 32 bits and then Java 1.7 (1.7.0-jdk7u6-b20-20120719) from openjdk-osx-build. By the end you'll find latest official Oracle Java 7, aka 1.7.0_05.</p>

<p>What does it means for you in a command line mode, console is just mandatory for any serious OSX geek ?</p>

<p>Let see java used by default :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>java -version
</span><span class='line'>java version <span class="s2">&quot;1.6.0_33&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.6.0_33-b03-424-11M3720<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 20.8-b03-424, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Default Java is Apple 1.6.0_33, 64bits as expected, so far so good.</p>

<p>What should i do if I want to select instead Java 7 ?</p>

<h2>Standard Unix way</h2>

<p>You could just update your PATH environment variable to update search path :
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mbp-rico:~ henri<span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home/bin:<span class="nv">$PATH</span>
</span><span class='line'>mbp-rico:~ henri<span class="nv">$ </span>java -version
</span><span class='line'>openjdk version <span class="s2">&quot;1.7.0-jdk7u6-b20&quot;</span>
</span><span class='line'>OpenJDK Runtime Environment <span class="o">(</span>build 1.7.0-jdk7u6-b20-20120719<span class="o">)</span>
</span><span class='line'>OpenJDK 64-Bit Server VM <span class="o">(</span>build 23.2-b09, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It works but OSX provide smarter mechanism.</p>

<h2>OSX way</h2>

<p>Keeping in mind we're discussing command line operation, updating default JVM via Java Preferences will not be retained, will define instead <strong>JAVA_HOME</strong> environment variable like this :</p>

<p><code>bash
mbp-rico:~ henri$ export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home/
mbp-rico:~ henri$ java -version
openjdk version "1.7.0-jdk7u6-b20"
OpenJDK Runtime Environment (build 1.7.0-jdk7u6-b20-20120719)
OpenJDK 64-Bit Server VM (build 23.2-b09, mixed mode)
</code></p>

<p>We could keep our current PATH and it will be <strong>Apple java bootstrap</strong> system, living into <strong>/usr/bin/java</strong> who make use of <strong>JAVA_HOME</strong> and launch the proper JVM. Simple but efficient .</p>

<h2>java_home</h2>

<p>As we see previously, Java Preferences define an order of preferred JVM on OSX, like alternatives does on many Linux systems, especially those using <a href="http://www.jpackage.org">JPackage</a> tooling. So there should be a way to get access to these preferences and here entering <strong>java_home</strong></p>

<p>java_home is located in /usr/libexec and has many useful features :</p>

<p>``` bash
mbp-rico:~ henri$ /usr/libexec/java_home --help
Usage: java_home [options...]</p>

<pre><code>Returns the path to a Java home directory from the current user's settings.
</code></pre>

<p>Options:</p>

<pre><code>[-v/--version   &lt;version&gt;]       Filter Java versions in the "JVMVersion" form 1.X(+ or *).
[-a/--arch      &lt;architecture&gt;]  Filter JVMs matching architecture (i386, x86_64, etc).
[-d/--datamodel &lt;datamodel&gt;]     Filter JVMs capable of -d32 or -d64
[-t/--task      &lt;task&gt;]          Use the JVM list for a specific task (Applets, WebStart, BundledApp, JNI, or CommandLine)
[-F/--failfast]                  Fail when filters return no JVMs, do not continue with default.
[   --exec      &lt;command&gt; ...]   Execute the $JAVA_HOME/bin/&lt;command&gt; with the remaining arguments.
[-R/--request]                   Request installation of a Java Runtime if not installed.
[-X/--xml]                       Print full JVM list and additional data as XML plist.
[-V/--verbose]                   Print full JVM list with architectures.
[-h/--help]                      This usage information.
</code></pre>

<p>```</p>

<p>Let's play with <strong>java_home</strong> now.</p>

<p>Obtaining path of default JVM :
<code>bash
mbp-rico:~ henri$ /usr/libexec/java_home
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</code></p>

<p>Obtaining path of default Java 7 JVM :
<code>bash
mbp-rico:~ henri$ /usr/libexec/java_home -v 1.7
/Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home
</code></p>

<p>Obtaining path of default Java 8 JVM :
<code>bash
mbp-rico:~ henri$ /usr/libexec/java_home -v 1.8
/Library/Java/JavaVirtualMachines/1.8.0.jdk/Contents/Home
</code></p>

<p>Obtaining path of default Java 1.6 32 bits JVM :
<code>bash
mbp-rico:~ henri$ /usr/libexec/java_home -v 1.6 -a i386
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</code></p>

<p>Obtaining path of default Java 1.6 64 bits JVM :
<code>bash
mbp-rico:~ henri$ /usr/libexec/java_home -v 1.6 -a x86_64
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</code></p>

<p>Here you could see that 32 and 64bits JVM have the same path. This is because due to universal mode (i386/x86_64), <strong>Apple</strong> produce a dual mode JVM. This is not the case for <strong>Oracle Java 7</strong> where only 64bits JVM is available.</p>

<p>Let's combine <strong>java_home</strong> and <strong>JAVA_HOME</strong> :
<code>bash
mbp-rico:~ henri$ export JAVA_HOME=`/usr/libexec/java_home -v 1.7`
mbp-rico:~ henri$ java -version
openjdk version "1.7.0-jdk7u6-b20"
OpenJDK Runtime Environment (build 1.7.0-jdk7u6-b20-20120719)
OpenJDK 64-Bit Server VM (build 23.2-b09, mixed mode)
</code></p>

<p>This is a very nice features if you want to specify a Java Level (6 or 7) following your<strong> Java Preferences </strong>for some of your server side application (let say <strong>Apache Tomcat</strong>) or command operation (like <strong>Apache Maven</strong>).</p>

<p>Typically for my Apache Tomcat powered application like Jenkins, I usually set it in bin/setenv.sh :
<code>bash
export JAVA_HOME=`/usr/libexec/java_home -v 1.7`
CATALINA_OPTS=-Xms256m -Xmx512m -DJENKINS_HOME=$JENKINS_HOME -Dhudson.model.Hudson.logStartupPerformance=true -Duser.language=en -Djava.awt.headless=true
</code></p>

<p>Do you want to get a list of all JVM on your system ?</p>

<p>``` bash
mbp-rico:~ henri$ /usr/libexec/java_home -V
Matching Java Virtual Machines (33):</p>

<pre><code>1.6.0_33-b03-424, x86_64:   "Java SE 6" /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
1.6.0_33-b03-424, i386: "Java SE 6" /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
1.6.0_31-b04-411, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_31-b04-411.jdk/Contents/Home
1.6.0_31-b04-411, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_31-b04-411.jdk/Contents/Home
1.7.0-jdk7u6-b20-20120719, x86_64:  "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home
1.8.0-jdk8-b47-20120720, x86_64:    "OpenJDK 8" /Library/Java/JavaVirtualMachines/1.8.0.jdk/Contents/Home
1.7.0-jdk7u4-b21-20120427, i386:    "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u4.jdk/Contents/Home
1.7.0_05, x86_64:   "Java SE 7" /Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home
1.6.0_33-b03-424, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_33-b03-424.jdk/Contents/Home
1.6.0_33-b03-424, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_33-b03-424.jdk/Contents/Home
1.8.0-jdk8-b45-20120713-jigsaw, x86_64: "OpenJDK 8" /Library/Java/JavaVirtualMachines/1.8.0-jigsaw.jdk/Contents/Home
1.8.0-b48-20120720-lambda, x86_64:  "OpenJDK 8" /Library/Java/JavaVirtualMachines/1.8.0-lambda.jdk/Contents/Home
1.7.0-jdk7u6-b20-20120719, i386:    "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u6.jdk/Contents/Home
1.7.0-jdk7u4-b21-20120427, x86_64:  "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u4.jdk/Contents/Home
1.7.0-jdk7u4-b21-20120421, x86_64:  "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u4-64.jdk/Contents/Home
1.7.0, x86_64:  "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home
1.7.0, i386:    "OpenJDK 7" /Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home
1.6.0_32-b05-420, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home
1.6.0_32-b05-420, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home
1.6.0_32-b05-417, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_32-b05-417.jdk/Contents/Home
1.6.0_32-b05-417, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_32-b05-417.jdk/Contents/Home
1.6.0_31-b04-413, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_31-b04-413.jdk/Contents/Home
1.6.0_31-b04-413, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_31-b04-413.jdk/Contents/Home
1.6.0_30-b12-409, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_30-b12-409.jdk/Contents/Home
1.6.0_30-b12-409, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_30-b12-409.jdk/Contents/Home
1.6.0_30-b12-404, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_30-b12-404.jdk/Contents/Home
1.6.0_30-b12-404, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_30-b12-404.jdk/Contents/Home
1.6.0_29-b11-397, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_29-b11-397.jdk/Contents/Home
1.6.0_29-b11-397, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_29-b11-397.jdk/Contents/Home
1.6.0_27-b07-395, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_27-b07-395.jdk/Contents/Home
1.6.0_27-b07-395, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_27-b07-395.jdk/Contents/Home
1.6.0_26-b03-383, x86_64:   "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home
1.6.0_26-b03-383, i386: "Java SE 6" /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home
</code></pre>

<p>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
```</p>

<h2>Note on JVM Locations</h2>

<p>You may have noticed many differents paths for JVM :</p>

<ul>
<li><p>/System/Library/Java/JavaVirtualMachines is where Apple install System JVM. Here you could have only one JVM by family, ie 1.6, 1.7. These JVM will be available to all users on system.</p></li>
<li><p>/Library/Java/JavaVirtualMachines is a slot location for guest JVMs, specially designed to host contributors JVM like <strong>Oracle</strong>, <strong>openjdk-osx-build </strong>or<strong> Apple Developper Preview JVMs</strong> Also, these JVM will be available to all users on system.</p></li>
<li><p>/Users/bill/Library/Java/JavaVirtualMachines is a slot for contributor JVMs but only available to user bill.</p></li>
</ul>


<h2>To conclude</h2>

<p>OSX is probably the platform with the more choice of Java to run and experiment, Java 6, Java 7, OpenJDK 7, 8, Lambda, Jigsaw.</p>

<p>And with its <strong>/usr/libexec/java_home</strong> and <strong>JAVA_HOME</strong> environment variable, you could select any of them for your console or command mode operations very easily.</p>

<p>Enjoy Java on OSX !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Universal Apache Tomcat Native Library on OS/X - updated]]></title>
    <link href="http://hgomez.github.com/blog/2012/06/13/building-universal-apache-tomcat-native-library-on-osx-updated/"/>
    <updated>2012-06-13T10:28:13+02:00</updated>
    <id>http://hgomez.github.com/blog/2012/06/13/building-universal-apache-tomcat-native-library-on-osx-updated</id>
    <content type="html"><![CDATA[<p>Updated build process for tomcat-connector, 1.1.24, no more APXS variable or configure parameters required</p>

<p>``` bash
TCN_RELEASE=1.1.24
curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/$TCN_RELEASE/source/tomcat-native-$TCN_RELEASE-src.tar.gz -o tomcat-native-$TCN_RELEASE-src.tar.gz
tar xvzf tomcat-native-$TCN_RELEASE-src.tar.gz
cd tomcat-native-$TCN_RELEASE-src/jni/native</p>

<p>CFLAGS='-arch i386 -arch x86_64' APXSLDFLAGS='-arch i386 -arch x86_64' ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
make clean
make</p>

<p>sudo cp .libs/libtcnative-1.0.1.24.dylib /usr/lib/java
sudo rm -f  /usr/lib/java/libtcnative-1.dylib
sudo ln -s /usr/lib/java/libtcnative-1.0.1.24.dylib /usr/lib/java/libtcnative-1.dylib
```</p>

<h3>A note about Lion</h3>

<p>If you get Java on Lion using the java command on terminal or via the Java Developer Package for Mac OS X 10.7, Java headers are not on the usual location and you could find them under <strong>/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers</strong></p>

<p>You should then update the <strong>configure</strong> command line like this :
<code>bash
CFLAGS='-arch i386 -arch x86_64' ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/
</code></p>

<p>``` bash
TCN_RELEASE=1.1.24
curl http://mir2.ovh.net/ftp.apache.org/dist//tomcat/tomcat-connectors/native/$TCN_RELEASE/source/tomcat-native-$TCN_RELEASE-src.tar.gz -o tomcat-native-$TCN_RELEASE-src.tar.gz
tar xvzf tomcat-native-$TCN_RELEASE-src.tar.gz
cd tomcat-native-$TCN_RELEASE-src/jni/native</p>

<p>CFLAGS='-arch i386 -arch x86_64' ./configure --with-apr=/usr --with-ssl=/usr --with-java-home=/System/Library/Frameworks/JavaVM.framework/Versions/A/
make clean
make</p>

<p>sudo cp .libs/libtcnative-1.0.dylib /usr/lib/java
sudo rm -f  /usr/lib/java/libtcnative-1.dylib
sudo ln -s /usr/lib/java/libtcnative-1.0.dylib /usr/lib/java/libtcnative-1.dylib
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Apache Tomcat Connector (mod_jk) on OSX]]></title>
    <link href="http://hgomez.github.com/blog/2012/03/21/using-apache-tomcat-connector-mod_jk-on-osx/"/>
    <updated>2012-03-21T09:48:34+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/03/21/using-apache-tomcat-connector-mod_jk-on-osx</id>
    <content type="html"><![CDATA[<p>You'll need first mod_jk installed, follow <a href="http://blog.hgomez.net/2012/03/21/building-universal-apache-tomcat-connector-mod_jk-on-osx/">Building Guide</a>.</p>

<p>Create /etc/apache2/other/jk.conf :</p>

<p>``` bash</p>

<h1>Load JK Module</h1>

<p>LoadModule jk_module     libexec/apache2/mod_jk.so</p>

<h1>JK workers.properties</h1>

<p>JkWorkersFile /etc/apache2/other/workers.properties</p>

<h1>JK shared memory location</h1>

<p>JkShmFile     /var/log/apache2/mod_jk.shm</p>

<h1>JK logs</h1>

<p>JkLogFile     /var/log/apache2/mod_jk.log</p>

<h1>JK log level [debug/error/info]</h1>

<p>JkLogLevel    info</p>

<h1>JK timestamp log format</h1>

<p>JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "
```</p>

<p>Create /etc/apache2/other/workers.properties</p>

<p>``` bash
worker.list=jenkins,watch,manage</p>

<h1>Set properties for worker jenkins (ajp13)</h1>

<p>worker.jenkins.type=ajp13
worker.jenkins.host=localhost
worker.jenkins.port=8009</p>

<h1>status workers</h1>

<p>worker.watch.type=status
worker.watch.read_only=true
worker.watch.mount=/user/status/jk
worker.manage.type=status
worker.manage.mount=/admin/status/jk
```</p>

<p>I choose to use VirtualName Hosting and so defined one into /etc/apache2/extra/httpd-vhosts.conf :</p>

<p>``` bash
NameVirtualHost *:80</p>

<p><VirtualHost *:80></p>

<pre><code>ServerName  mbpbuilder.hgomez.net
ServerAlias mbpbuilder
ServerAdmin webmaster@mbpbuilder.hgomez.net

ErrorLog    "/var/log/apache2/mbpbuilder.org-error_log"
CustomLog   "/var/log/apache2/mbpbuilder-access_log" common

JkMount  /* jenkins
</code></pre>

<p></VirtualHost>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Universal Apache Tomcat Connector (mod_jk) on OSX]]></title>
    <link href="http://hgomez.github.com/blog/2012/03/21/building-universal-apache-tomcat-connector-mod_jk-on-osx/"/>
    <updated>2012-03-21T09:31:18+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/03/21/building-universal-apache-tomcat-connector-mod_jk-on-osx</id>
    <content type="html"><![CDATA[<p>Build Universal Apache Tomcat Connector (mod_jk) for OSX follow tricks used for Apache Tomcat Native Library.</p>

<p><code>bash
CFLAGS='-arch i386 -arch x86_64' APXSLDFLAGS='-arch i386-arch x86_64'
</code></p>

<p>Here is a small script to do it :</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<p>#</p>

<p>JK_VERSION=1.2.37</p>

<p>curl http://mir2.ovh.net/ftp.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-${JK_VERSION}-src.tar.gz -o tomcat-connectors-${JK_VERSION}-src.tar.gz
tar xvzf tomcat-connectors-${JK_VERSION}-src.tar.gz
cd tomcat-connectors-${JK_VERSION}-src/native</p>

<p>./configure --with-apxs=/usr/sbin/apxs CFLAGS='-arch i386 -arch x86_64' APXSLDFLAGS='-arch i386-arch x86_64'
make clean
make
```</p>

<p>Installation is pretty simple :</p>

<p><code>bash
sudo cp apache-2.0/.libs/mod_jk.so /usr/libexec/apache2/
</code></p>

<p>You could then restart your Apache HTTPd server to get new mod_jk used :</p>

<p><code>bash
sudo /usr/sbin/apachectl restart
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSD or not SSD ?]]></title>
    <link href="http://hgomez.github.com/blog/2012/03/18/ssd-or-not-ssd/"/>
    <updated>2012-03-18T10:58:01+01:00</updated>
    <id>http://hgomez.github.com/blog/2012/03/18/ssd-or-not-ssd</id>
    <content type="html"><![CDATA[<p>My MacBookPro is quite old now :</p>

<ul>
<li><p>MacBook Pro 5.1 (Late 2008)</p></li>
<li><p>Core2Duo 2.66Ghz</p></li>
</ul>


<p>Under Lion, MBP appears to be sometime laggy even if I already updated it :</p>

<ul>
<li><p>Replaced original 4Gb RAM to 8Gb DDR3 (GSkill PC8500 SQ (1066 MHz), 7-7-7-20)</p></li>
<li><p>Replaced original Hitachi 320GB/5400 RPM by a 500Gb WesternDigital Black Black 7200RPM (WD5000BEKT-75KA9T0)</p></li>
</ul>


<p>I run <a href="http://www.primatelabs.ca/geekbench/">GeekBench 2.2.7</a> and give me a bench result of <strong>3752</strong> :
``` bash
Benchmark Summary
  Integer Score              3123 |||||||||
  Floating Point Score       5493 ||||||||||||||||
  Memory Score               2629 |||||||
  Stream Score               2110 ||||||</p>

<p>  Geekbench Score            3752 |||||||||||</p>

<p>System Information
  Operating System      Mac OS X 10.7.3 (Build 11D50)
  Model                 MacBook Pro (Late 2008)
  Motherboard           Apple Inc. Mac-F42D86A9 Proto
  Processor             Intel Core 2 Duo T9550 @ 2.66 GHz</p>

<pre><code>                    1 Processor, 2 Cores, 2 Threads
</code></pre>

<p>  Processor ID          GenuineIntel Family 6 Model 23 Stepping 10
  L1 Instruction Cache  32.0 KB x 2
  L1 Data Cache         32.0 KB x 2
  L2 Cache              6.00 MB
  L3 Cache              0.00 B
  Memory                8.00 GB 1067 MHz DDR3
  BIOS                  Apple Inc.    MBP51.88Z.007E.B06.1202061253
```</p>

<p>IOs seems to be the limiting factor, especially when I'm using VirtualBox, I feel a slow IO performances.</p>

<h2>Time to bench IOs</h2>

<p>There is no tools like <strong><strong>HD Tune </strong></strong>on OSX, so I wrote a very simple shell script to measure raw IO performances.</p>

<p>``` bash</p>

<h1>!/bin/sh</h1>

<p>COUNT=2048</p>

<p>echo "testing pseudo-IO performances - 1st Pass"
dd if=/dev/zero of=/dev/null bs=1m count=$COUNT</p>

<p>echo "testing IO write performances - 1st Pass"
dd if=/dev/zero of=PERFTEST bs=1m count=$COUNT</p>

<p>echo "testing IO read performances - 1st Pass"
dd if=PERFTEST of=/dev/null bs=1m count=$COUNT</p>

<p>echo "testing IO read performances - 2nd Pass"
dd if=PERFTEST of=/dev/null bs=1m count=$COUNT</p>

<p>echo "testing IO write performances - 2nd Pass"
dd if=/dev/zero of=PERFTEST bs=1m count=$COUNT
```</p>

<p>Results :</p>

<p><code>bash
testing pseudo-IO performances - 1st Pass
2048+0 records in
2048+0 records out
2147483648 bytes transferred in 0.225590 secs (9519410157 bytes/sec)
testing IO write performances - 1st Pass
2048+0 records in
2048+0 records out
2147483648 bytes transferred in 29.882202 secs (71864973 bytes/sec)
testing IO read performances - 1st Pass
2048+0 records in
2048+0 records out
2147483648 bytes transferred in 0.677308 secs (3170615711 bytes/sec)
testing IO read performances - 2nd Pass
2048+0 records in
2048+0 records out
2147483648 bytes transferred in 0.675835 secs (3177527036 bytes/sec)
testing IO write performances - 2nd Pass
2048+0 records in
2048+0 records out
2147483648 bytes transferred in 33.203725 secs (64675986 bytes/sec)
</code></p>

<p>Note, I run this performance tests from a directory excluded from Spotlight indexing !</p>

<p><img class="center" src="/images/SpotLight-Exclude.png" title="[SpotLight Exclude [SpotLight Exclude]]" ></p>

<ul>
<li><p>Pseudo IO performance is justing virtual IO (/dev/zero and /dev/null), so it provide max raw IO performance : <strong>9078 MB/s</strong></p></li>
<li><p>Write IO performance is between <strong>61</strong> and <strong>68 MB/s</strong></p></li>
<li><p>Read IO performance is very high with <strong>3023 MB/s</strong></p></li>
</ul>


<p>I replayed script raising COUNT from <strong>2048</strong> to <strong>20480</strong> to reduce OSX ram buffer impact in Read IO performance but still get about <strong>2000 MB/s</strong></p>

<h3>iStat Menu disk activity - Write Performance</h3>

<p><img class="center" src="/images/WD-Perfs.png" title="[WD Perfs [WD Perfs]]" ></p>

<h2>Conclusions</h2>

<ul>
<li><p>WD Black Edition perform pretty well on raw sequential Read Operations</p></li>
<li><p>With its average <strong>63 MB/s</strong> raw sequential Write Operations, WD is about 7 time slower than faster SSD like <strong>OCZ Vertex 3</strong></p></li>
</ul>


<p>Is it time to update MBP to SSD ? Probably and my candidates are :</p>

<ul>
<li><p>Crucial M4 128GB. This SSD is reported very stable and reliable. Bonus, its firmware could be updated from Mac.</p></li>
<li><p>OCZ Vertex 3 120GB. This SSD is top performer in benchmarks but Googling it reports many reliability problems.</p></li>
</ul>


<p>I'd like to get feedback from you, performing same performance testing on your Mac hardware (MBP/ SSD configurations very welcomed).</p>
]]></content>
  </entry>
  
</feed>
